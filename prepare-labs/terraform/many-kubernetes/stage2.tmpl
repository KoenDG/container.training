terraform {
  required_providers {
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "2.16.1"
    }
  }
}

%{ for index, cluster in clusters ~}

provider "kubernetes" {
  alias = "cluster_${index}"
  config_path = "./kubeconfig.${index}"
}

provider "helm" {
  alias = "cluster_${index}"
  kubernetes {
    config_path = "./kubeconfig.${index}"
  }
}

# Password used for SSH and code-server access
resource "random_string" "shpod_${index}" {
  length  = 6
  special = false
  upper   = false
}

resource "kubernetes_namespace" "shpod_${index}" {
  provider = kubernetes.cluster_${index}
  metadata {
    name = "shpod"
  }
}

data "kubernetes_service" "shpod_${index}" {
  depends_on = [ helm_release.shpod_${index} ]
  provider = kubernetes.cluster_${index}
  metadata {
    name = "shpod"
    namespace = "shpod"
  }
}

resource "helm_release" "shpod_${index}" {
  provider = helm.cluster_${index}
  repository = "https://shpod.in"
  chart = "shpod"
  name = "shpod"
  namespace = "shpod"
  create_namespace = false
  set {
    name = "service.type"
    value = "NodePort"
  }
  set {
    name = "resources.requests.cpu"
    value = "100m"
  }
  set {
    name = "resources.requests.memory"
    value = "500M"
  }
  set {
    name = "resources.limits.cpu"
    value = "1"
  }
  set {
    name = "resources.limits.memory"
    value = "1000M"
  }
  set {
    name = "persistentVolume.enabled"
    value = "true"
  }
  set {
    name = "ssh.password"
    value = random_string.shpod_${index}.result
  }
  set {
    name = "rbac.cluster.clusterRoles"
    value = "{cluster-admin}"
  }
  set {
    name = "codeServer.enabled"
    value = "true"
  }
}

resource "helm_release" "metrics_server_${index}" {
  # Some providers pre-install metrics-server.
  # Some don't. Let's install metrics-server,
  # but only if it's not already installed.
  count = yamldecode(file("./flags.${index}"))["has_metrics_server"] ? 0 : 1
  provider = helm.cluster_${index}
  repository = "https://kubernetes-sigs.github.io/metrics-server/"
  chart = "metrics-server"
  version = "3.8.2"
  name = "metrics-server"
  namespace = "metrics-server"
  create_namespace = true
  set {
    name = "args"
    value = "{--kubelet-insecure-tls}"
  }
}

resource "kubernetes_config_map" "kubeconfig_${index}" {
  provider = kubernetes.cluster_${index}
  metadata {
    name = "kubeconfig"
    namespace = kubernetes_namespace.shpod_${index}.metadata.0.name
  }
  data = {
    kubeconfig_from_provider = file("./kubeconfig.${index}")
    kubeconfig_cluster_admin = <<-EOT
      kind: Config
      apiVersion: v1
      current-context: cluster-admin@k8s-${index}
      clusters:
      - name: k8s-${index}
        cluster:
          certificate-authority-data: $${yamldecode(file("./kubeconfig.${index}")).clusters.0.cluster.certificate-authority-data}
          server: $${yamldecode(file("./kubeconfig.${index}")).clusters.0.cluster.server}
      contexts:
      - name: cluster-admin@k8s-${index}
        context:
          cluster: k8s-${index}
          user: cluster-admin
      users:
      - name: cluster-admin
        user:
          client-key-data: $${base64encode(tls_private_key.cluster_admin_${index}.private_key_pem)}
          client-certificate-data: $${base64encode(kubernetes_certificate_signing_request_v1.cluster_admin_${index}.certificate)}
    EOT
  }
}

resource "tls_private_key" "cluster_admin_${index}" {
  algorithm = "RSA"
}

resource "tls_cert_request" "cluster_admin_${index}" {
  private_key_pem = tls_private_key.cluster_admin_${index}.private_key_pem
  subject {
    common_name = "cluster-admin"
    # Note: CSR API v1 doesn't allow issuing certs with "system:masters" anymore.
    #organization = "system:masters"
    # We'll use this custom group name instead.cluster-admin user.
    organization = "shpod-cluster-admins"
  }
}

resource "kubernetes_certificate_signing_request_v1" "cluster_admin_${index}" {
  provider = kubernetes.cluster_${index}
  metadata {
    name = "cluster-admin"
  }
  spec {
    usages = ["client auth"]
    request = tls_cert_request.cluster_admin_${index}.cert_request_pem
    signer_name = "kubernetes.io/kube-apiserver-client"
  }
  auto_approve = true
}

%{ endfor ~}

output "ips_txt" {
  value = join("\n", [
  %{ for index, cluster in clusters ~}
    join("\n", concat(
      split(" ", file("./externalips.${index}"))
    )),
  %{ endfor ~}
  ""
  ])
}

output "logins_jsonl" {
  value = join("\n", [
  %{ for index, cluster in clusters ~}
    jsonencode({
      login = "k8s",
      password = random_string.shpod_${index}.result,
      port = data.kubernetes_service.shpod_${index}.spec[0].port[0].node_port,
      codeServerPort = data.kubernetes_service.shpod_${index}.spec[0].port[1].node_port,
      ipaddrs = replace(file("./externalips.${index}"), " ", "\t"),
    }),
  %{ endfor ~}
  ""
  ])
}
